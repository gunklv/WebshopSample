version: '3.8'

services:
  
  mongo:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ./docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "8099:8081"
    depends_on:
      - mongo
    environment:
      ME_CONFIG_MONGODB_PORT: 27017
    
  postgres-catalog:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: catalog
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes: 
      - ./docker-entrypoint-initdb.d/postgres-catalog-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql
      
  postgres-identity:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: identity
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5433:5432"

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    depends_on:
      - postgres-catalog
      - postgres-identity
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"

  zookeeper:
    image: confluentinc/cp-zookeeper:5.4.0
    restart: always
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  
  kafka:
    image: confluentinc/cp-kafka:6.1.1
    restart: always
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    expose:
      - "29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://192.168.1.66:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: "1"
    command: sh -c "((sleep 30 && kafka-topics --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 1 --topic catalog)&) && /etc/confluent/docker/run ">

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: always
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - "kafka"
      
  identity-server:
    restart: always
    build: ..\src\identity\IdentityServer.Api
    ports:
      - "5011:80"
    depends_on:
      - "postgres-identity"
    environment:
      ASPNETCORE_ENVIRONMENT: "prod"
  
  identity-client:
    restart: always
    build: ..\src\Identity\IdentityClient.Api
    ports:
      - "5012:80"
    depends_on:
      - "identity-server"
    environment:
      ASPNETCORE_ENVIRONMENT: "prod"
      
  catalog-api:
    restart: always
    build:
      dockerfile: /Catalog.Api/Dockerfile
      context: ../src/Catalog
    ports:
      - "5013:80"
    depends_on:
      - "postgres-catalog"
      - "kafka"
    environment:
      ASPNETCORE_ENVIRONMENT: "prod"
      
  catalog-eventsender:
    restart: always
    build: ..\src\Catalog\Catalog.IntegrationEventSenderHost
    depends_on:
      - "postgres-catalog"
      - "kafka"
    environment:
      ASPNETCORE_ENVIRONMENT: "prod"
    
  cart-api:
    restart: always
    build: ..\src\Cart\Cart.Api
    ports:
      - "5014:80"
    depends_on:
      - "mongo"
    environment:
      ASPNETCORE_ENVIRONMENT: "prod"
